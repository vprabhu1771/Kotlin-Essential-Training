To write text files in Kotlin, you can use `BufferedWriter` or `FileWriter` class. Here's an example of how to write text to a file using `BufferedWriter`:

```kotlin
import java.io.BufferedWriter
import java.io.File
import java.io.FileWriter
import java.io.IOException

fun main() {
    val fileName = "output.txt"

    try {
        val file = File(fileName)
        val writer = BufferedWriter(FileWriter(file))

        // Writing multiple lines to the file
        writer.write("Hello, this is line 1.")
        writer.newLine() // Move to the next line
        writer.write("And this is line 2.")
        
        // Don't forget to close the writer when you're done
        writer.close()

        println("Text written to $fileName successfully.")
    } catch (e: IOException) {
        println("Error writing to the file: ${e.message}")
    }
}
```

In this example:

1. We import the necessary classes: `java.io.BufferedWriter`, `java.io.File`, `java.io.FileWriter`, and `java.io.IOException`.
2. We specify the name of the text file we want to write to (`output.txt`). If the file does not exist, it will be created in the same directory as the Kotlin source file.
3. We use a `try-catch` block to handle any potential exceptions that might occur during file writing.
4. Inside the `try` block, we create a `File` object representing the output file and use `BufferedWriter` to efficiently write text to the file.
5. We use the `write` function to write text to the file. In this example, we write two lines to the file. The `newLine()` function is used to move to the next line after writing each line.
6. Finally, we close the `BufferedWriter` to save the changes and release any system resources.

Make sure to handle exceptions gracefully as shown in the example to ensure your program behaves well in case of any issues while writing the file. Also, remember to change `"output.txt"` to the desired name of the output file.