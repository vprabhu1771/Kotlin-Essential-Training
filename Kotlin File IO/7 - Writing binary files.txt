To write binary files in Kotlin, you can use `FileOutputStream` along with `BufferedOutputStream` for improved performance. Here's an example of how to write binary data to a file:

```kotlin
import java.io.BufferedOutputStream
import java.io.File
import java.io.FileOutputStream
import java.io.IOException

fun main() {
    val fileName = "output.bin"

    try {
        val file = File(fileName)
        val outputStream = BufferedOutputStream(FileOutputStream(file))

        val binaryData = byteArrayOf(0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x2C, 0x20, 0x57, 0x6F, 0x72, 0x6C, 0x64)
        outputStream.write(binaryData)

        // Don't forget to close the output stream when you're done
        outputStream.close()

        println("Binary data written to $fileName successfully.")
    } catch (e: IOException) {
        println("Error writing to the file: ${e.message}")
    }
}
```

In this example:

1. We import the necessary classes: `java.io.BufferedOutputStream`, `java.io.File`, `java.io.FileOutputStream`, and `java.io.IOException`.
2. We specify the name of the binary file we want to write to (`output.bin`). If the file does not exist, it will be created in the same directory as the Kotlin source file.
3. We use a `try-catch` block to handle any potential exceptions that might occur during file writing.
4. Inside the `try` block, we create a `File` object representing the output file and use `BufferedOutputStream` to efficiently write binary data to the file.
5. We define the binary data as a `byteArrayOf` containing hexadecimal values. In this example, we write the ASCII values of the characters "Hello, World".
6. We use the `write` function of the `BufferedOutputStream` to write the binary data to the file.
7. Finally, we close the `BufferedOutputStream` to save the changes and release any system resources.

Just like when reading or writing text files, it's essential to handle exceptions gracefully to ensure your program behaves well in case of any issues while writing the binary file. Also, remember to change `"output.bin"` to the desired name of the output binary file.