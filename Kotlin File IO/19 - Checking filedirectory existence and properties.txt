To check file and directory existence and retrieve their properties in Kotlin, you can use the `java.io.File` class. This class provides methods to check if a file or directory exists, as well as properties to access various attributes like file size, last modified timestamp, and more. Here's an example of how to do this:

```kotlin
import java.io.File

fun main() {
    val filePath = "example.txt"
    val directoryPath = "example_directory"

    // Check file existence and properties
    val file = File(filePath)
    if (file.exists()) {
        println("File '$filePath' exists.")
        println("Is a file: ${file.isFile}")
        println("Is a directory: ${file.isDirectory}")
        println("File size: ${file.length()} bytes")
        println("Last modified: ${file.lastModified()}")

        // You can perform other operations with the file here
    } else {
        println("File '$filePath' does not exist.")
    }

    // Check directory existence and properties
    val directory = File(directoryPath)
    if (directory.exists()) {
        println("Directory '$directoryPath' exists.")
        println("Is a file: ${directory.isFile}")
        println("Is a directory: ${directory.isDirectory}")

        // You can list files and subdirectories here using directory.listFiles() method
        val filesAndDirectories = directory.listFiles()
        if (filesAndDirectories != null) {
            println("Files and directories in '$directoryPath':")
            for (fileOrDir in filesAndDirectories) {
                println(fileOrDir.name)
            }
        } else {
            println("Directory is empty.")
        }

    } else {
        println("Directory '$directoryPath' does not exist.")
    }
}
```

In this example:

1. We specify the `filePath` and `directoryPath` for the file and directory we want to check.

2. We create `File` objects to represent the file and directory.

3. We use the `exists()` method to check if the file or directory exists.

4. For the file, we use the `isFile` property to check if it's a regular file and the `isDirectory` property to check if it's a directory.

5. For the file, we use the `length()` method to get the file size in bytes and the `lastModified()` method to get the last modified timestamp in milliseconds since the epoch.

6. For the directory, we use the `isFile` and `isDirectory` properties similarly.

7. We can list the files and subdirectories in the directory using the `listFiles()` method, and then iterate through the array to access their names or other properties.

Remember to handle exceptions gracefully to ensure your program behaves well in case of any issues when accessing file and directory properties.