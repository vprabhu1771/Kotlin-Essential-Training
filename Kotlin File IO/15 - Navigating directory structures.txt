In Kotlin, you can navigate through a directory structure using recursive functions to list all files and subdirectories present in a given directory and its subdirectories. Here's an example of how to navigate through directory structures:

```kotlin
import java.io.File

fun listFilesAndSubdirectories(directory: File) {
    if (directory.exists() && directory.isDirectory) {
        val filesAndDirectories = directory.listFiles()

        if (filesAndDirectories != null) {
            for (file in filesAndDirectories) {
                if (file.isDirectory) {
                    println("Directory: ${file.absolutePath}")
                    listFilesAndSubdirectories(file) // Recursively explore subdirectory
                } else {
                    println("File: ${file.absolutePath}")
                }
            }
        } else {
            println("The directory is empty.")
        }
    } else {
        println("The specified path is not a valid directory.")
    }
}

fun main() {
    val directoryPath = "my_directory"

    try {
        val directory = File(directoryPath)
        listFilesAndSubdirectories(directory)
    } catch (e: Exception) {
        println("Error navigating directory structure: ${e.message}")
    }
}
```

In this example:

1. We define a recursive function `listFilesAndSubdirectories()` that takes a `File` object representing a directory as an argument.

2. Inside the function, we check if the provided directory exists and if it is indeed a directory using the `exists()` and `isDirectory` properties of the `File` object.

3. If the directory exists and is valid, we use the `listFiles()` function to obtain an array of `File` objects representing the files and subdirectories in the directory.

4. We loop through the array and check if each `File` object represents a directory or a file. If it's a directory, we print its path and then recursively call the `listFilesAndSubdirectories()` function to explore its subdirectories.

5. If the `listFiles()` function returns `null`, it means the directory is empty.

6. In the `main()` function, we specify the directory path as `"my_directory"`. Replace it with the path to the directory you want to start exploring from.

Remember to handle exceptions gracefully to ensure your program behaves well in case of any issues while navigating the directory structure. Also, keep in mind that the directory path is relative to the current working directory of your Kotlin program. If you want to specify an absolute path, make sure to provide the full path (e.g., `"C:/my_directory"`, `"/home/user/my_directory"`, etc.).