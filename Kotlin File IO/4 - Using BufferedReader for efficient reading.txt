Using `BufferedReader` is a more efficient way to read text files, especially when dealing with large files, because it buffers the input and reduces the number of system calls. Here's an example of how to read a text file using `BufferedReader` in Kotlin:

```kotlin
import java.io.BufferedReader
import java.io.File
import java.io.FileReader
import java.io.IOException

fun main() {
    val fileName = "example.txt"

    try {
        val file = File(fileName)
        val reader = BufferedReader(FileReader(file))

        var line: String?
        while (reader.readLine().also { line = it } != null) {
            // Process the line here
            println(line)
        }

        reader.close()
    } catch (e: IOException) {
        println("Error reading the file: ${e.message}")
    }
}
```

In this example:

1. We import the necessary classes: `java.io.BufferedReader`, `java.io.File`, `java.io.FileReader`, and `java.io.IOException`.
2. We specify the name of the text file we want to read (`example.txt`). Make sure the file exists in the same directory as the Kotlin source file.
3. We use a `try-catch` block to handle any potential exceptions that might occur during file reading.
4. Inside the `try` block, we create a `File` object representing the text file and create a `BufferedReader` to read the file efficiently.
5. We use a `while` loop to read the file line by line until the end of the file is reached (`readLine()` returns `null`).
6. Within the loop, we process each line as needed. In this example, we simply print each line to the console.
7. Finally, we close the `BufferedReader` to release any system resources.

Using `BufferedReader` is particularly beneficial when working with large text files because it reads data in chunks and minimizes the overhead of accessing the file system for each line. This can lead to significant performance improvements compared to using `readLines()` for large files.